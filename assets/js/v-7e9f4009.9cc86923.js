"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[942],{2977:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7e9f4009",path:"/algorithm/%E9%93%BE%E8%A1%A8/003-202.%20%E5%BF%AB%E4%B9%90%E6%95%B0.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"题目",slug:"题目",children:[]},{level:2,title:"解题思路",slug:"解题思路",children:[]},{level:2,title:"代码实现",slug:"代码实现",children:[]}],filePathRelative:"algorithm/链表/003-202. 快乐数.md",git:{updatedTime:163335541e4}}},3499:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(6252);const e={id:"_202-快乐数",tabindex:"-1"},t=(0,p._)("a",{class:"header-anchor",href:"#_202-快乐数","aria-hidden":"true"},"#",-1),o=(0,p.Uk)(),r={href:"https://leetcode-cn.com/problems/happy-number/",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("202. 快乐数"),c=(0,p.uE)('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：</p><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。 如果 可以变为 1，那么这个数就是快乐数。 如果 n 是快乐数就返回 true ；不是，则返回 false 。</p><p><strong>示例 1：</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：19\n输出：true\n解释：\n1 * 1 + 9 * 9 = 82\n8 * 8 + 2 * 2 = 68\n6 * 6 + 8 * 8 = 100\n1 * 1 + 0 * 0 + 0 * 0 = 1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>示例 2：</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：n = 2\n输出：false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>提示：</strong></p><ul><li>1 &lt;= n &lt;= 231 - 1</li></ul><blockquote><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/happy-number 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>看到示例2，n为2时会返回false，那么我们可以根据这个示例来找一下规律</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span>\n<span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">16</span>\n<span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">37</span>\n<span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">58</span>\n<span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">89</span>\n<span class="token number">8</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">145</span>\n<span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">42</span>\n<span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>发现没有，转了一圈，这个数有变成了4，那么这个4其实就是环的位置了，题目不清晰，对照下面的图片就明白了。</p><p><img src="https://gitee.com/Lee-Jp/notes/raw/master/images/image-20211004191640170.png" alt="image-20211004191640170"></p><p>既然这个题目确定了是链表问题，其实可以按照链表中快慢指针的方法来解决，链表中的节点都有一个next节点，这个题目中我们获取这个数字的平方之和就像是获取链表的next节点，我们可以将其封装成一个getNext方法。</p><p>有了获取next节点的方法，我们就可以利用快慢指针来获取这个链表是不是有环的，当快慢指针相同时，则证明是有环的，那肯定不是一个快乐数了，同时如果在快慢指针遍历时得到数字1后，那么我们也就不用考虑数字有没有环，直接返回true即可。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isHappy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> pre <span class="token operator">=</span> n<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 节点不相等并且得到的数字不为1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> pre <span class="token operator">&amp;&amp;</span> cur <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pre <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cur <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> cur <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getNext</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sum <span class="token operator">+=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',20),u={},k=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("h4",e,[t,o,(0,p._)("a",r,[l,(0,p.Wm)(a)])]),c],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);