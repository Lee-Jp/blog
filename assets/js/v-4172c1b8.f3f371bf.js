"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[301],{6865:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-4172c1b8",path:"/algorithm/%E9%93%BE%E8%A1%A8/002-142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"题目",slug:"题目",children:[]},{level:2,title:"解题思路",slug:"解题思路",children:[]},{level:2,title:"代码实现",slug:"代码实现",children:[]}],filePathRelative:"algorithm/链表/002-142. 环形链表 II.md",git:{updatedTime:163335541e4}}},585:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var e=a(6252);const p={id:"_142-环形链表-ii",tabindex:"-1"},t=(0,e._)("a",{class:"header-anchor",href:"#_142-环形链表-ii","aria-hidden":"true"},"#",-1),l=(0,e.Uk)(),c={href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("142. 环形链表 II"),r=(0,e.uE)('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p><p><strong>进阶</strong>：</p><p>你是否可以使用 O(1) 空间解决此题？</p><p><strong>示例 1：</strong></p><p><img src="https://gitee.com/Lee-Jp/notes/raw/master/images/circularlinkedlist-20211004164432381.png" alt="img"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：head = [3,2,0,-4], pos = 1\n输出：返回索引为 1 的链表节点\n解释：链表中有一个环，其尾部连接到第二个节点。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>示例 2：</strong></p><p><img src="https://gitee.com/Lee-Jp/notes/raw/master/images/circularlinkedlist_test2-20211004164440458.png" alt="img"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：head = [1,2], pos = 0\n输出：返回索引为 0 的链表节点\n解释：链表中有一个环，其尾部连接到第一个节点。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>示例 3：</strong></p><p><img src="https://gitee.com/Lee-Jp/notes/raw/master/images/circularlinkedlist_test3-20211004164449874.png" alt="img"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：head = [1], pos = -1\n输出：返回 null\n解释：链表中没有环。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>提示：</strong></p><p>链表中节点的数目范围在范围 [0, 104] 内 -105 &lt;= Node.val &lt;= 105 pos 的值为 -1 或者链表中的一个有效索引</p><blockquote><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/linked-list-cycle-ii 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',19),i=(0,e.Uk)("这个题和"),u={href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("141. 环形链表"),d=(0,e.Uk)("的升级版，在上个题的基础上，增加了一个问题，就是如何找到这个入环的节点的位置，我们依然可以使用快慢指针的思路来解决这个题。"),b=(0,e.uE)('<p>按照示例1的图，我们可以定义一个快指针一次走2步，一个慢指针一次走1步，这两个指针遵循如下轨迹</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1:快-&gt;0 慢-&gt;2\n2:快-&gt;2 慢-&gt;0\n3:快-&gt;-4 慢-&gt;-4\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://gitee.com/Lee-Jp/notes/raw/master/images/image-20211004174344970.png" alt="image-20211004174344970"></p><p>这里我们走到相遇点就不继续往下走了，我们来找一下规律，这里快指针走的路程是A+B以及n圈环，即<code>A+n(B+C)+B</code> ，慢指针走的路程是<code>A+B</code> ，而快指针走的路程又是慢指针的2倍（因为速度是2倍），所以我们可以列一个等式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">2</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token operator">+</span><span class="token constant">B</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">+</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token operator">+</span><span class="token constant">C</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token constant">B</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以转换为<code>A = n * C + (n - 1) * B</code> =&gt; <code>A = (n - 1) * (B + C) + C</code>，而<code>B + C</code>是一个环的长，我们忽略不计，所以最终等式为</p><p><strong>A = C</strong></p><p>得到了这个结论，我们只需要在找到交汇点后，再从头节点及当前慢指针节点的位置向下遍历，找到交汇点，这个交汇点就是环的入口了。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) <span class="token punctuation">{</span>\n *     this.val = val;\n *     this.next = null;\n * <span class="token punctuation">}</span>\n */</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">===</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">let</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!==</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',10),m={},g=(0,a(3744).Z)(m,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h4",p,[t,l,(0,e._)("a",c,[o,(0,e.Wm)(a)])]),r,(0,e._)("p",null,[i,(0,e._)("a",u,[k,(0,e.Wm)(a)]),d]),b],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);