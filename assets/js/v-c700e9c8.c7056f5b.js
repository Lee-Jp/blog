"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[590],{5567:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-c700e9c8",path:"/algorithm/%E9%93%BE%E8%A1%A8/004-206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"题目",slug:"题目",children:[]},{level:2,title:"解题思路",slug:"解题思路",children:[]},{level:2,title:"代码实现",slug:"代码实现",children:[]}],filePathRelative:"algorithm/链表/004-206. 反转链表.md",git:{updatedTime:163335541e4}}},8763:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(6252);const p={id:"_206-反转链表",tabindex:"-1"},t=(0,e._)("a",{class:"header-anchor",href:"#_206-反转链表","aria-hidden":"true"},"#",-1),l=(0,e.Uk)(),c={href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("206. 反转链表"),o=(0,e.uE)('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://gitee.com/Lee-Jp/notes/raw/master/images/rev1ex1.jpg" alt="img"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>示例 2：</strong></p><p><img src="https://gitee.com/Lee-Jp/notes/raw/master/images/rev1ex2.jpg" alt="img"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：head = [1,2]\n输出：[2,1]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>示例 3：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：head = []\n输出：[]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 [0, 5000]</li><li>-5000 &lt;= Node.val &lt;= 5000</li></ul><blockquote><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/reverse-linked-list 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这个题目写的很明确了，就是要反转链表，那么我们需要做的就是把最后一个节点改变为第一个节点，同时每个节点的next修改为它的前一个节点即可。</p><p>说的有点枯燥抽象，对程序员来说，直接上代码或许更好理解。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) <span class="token punctuation">{</span>\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * <span class="token punctuation">}</span>\n */</span>\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',18),i={},u=(0,a(3744).Z)(i,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h4",p,[t,l,(0,e._)("a",c,[r,(0,e.Wm)(a)])]),o],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);